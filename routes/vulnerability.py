from flask import Blueprint, render_template, request, redirect, jsonify, url_for
from scripts.vulnerability_scanner import scan_package
from scripts.db_helpers import update_scan_result, get_all_scans
import pkg_resources
import time
import json

bp = Blueprint('vuln', __name__)

@bp.route("/vuln")
def scan():
    target = request.args.get("target")
    scan_results = None
    error = None
    
    if target:
        if "==" in target:
            package, version = target.split("==", 1)
            results = scan_package(package.strip(), version.strip())
            if isinstance(results, dict) and results.get("error"):
                error = results["error"]
            else:
                scan_results = json.dumps(results, indent=4)
        else:
            error = "Input format must be package==version (e.g., flask==1.1.2)."
    
    return render_template('vulnerability/scan.html', 
                         target=target, 
                         scan_results=scan_results, 
                         error=error)

@bp.route("/vuln_scan_ajax")
def vuln_scan_ajax():
    pkg = request.args.get("package")
    version = request.args.get("version")
    
    if not pkg or not version:
        return jsonify({
            "error": "Package and version parameters are required."
        }), 400
    
    results = scan_package(pkg, version)
    vulns = results.get("vulns", [])
    update_scan_result(pkg, version, vulns)
    
    return jsonify({
        "status": "ok",
        "last_scanned": time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())
    })

@bp.route("/vuln_scan_all")
def vuln_scan_all():
    for dist in pkg_resources.working_set:
        pkg_name = dist.project_name
        pkg_version = dist.version
        results = scan_package(pkg_name, pkg_version)
        vulns = results.get("vulns", [])
        update_scan_result(pkg_name, pkg_version, vulns)
    # Change this line
    return redirect(url_for('vuln.vuln_all'))

@bp.route("/vuln_all")
def vuln_all():
    packages = get_all_scans()
    packages.sort(key=lambda pkg: (
        0 if pkg["vulns"] and len(pkg["vulns"]) > 0 else 1,
        pkg["package"]
    ))
    return render_template('vulnerability/all_scans.html', packages=packages)